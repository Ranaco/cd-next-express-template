
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique @db.VarChar(255)
  username         String   @unique @db.VarChar(100)
  passwordHash     String?  @map("password_hash") @db.VarChar(255)
  firstName        String?  @map("first_name") @db.VarChar(100)
  lastName         String?  @map("last_name") @db.VarChar(100)
  roleId           Int?     @map("role_id")
  isActive         Boolean  @default(true) @map("is_active")
  isVerified       Boolean  @default(false) @map("is_verified")
  emailVerifiedAt  DateTime? @map("email_verified_at")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  sessions                    UserSession[]
  passwordResetTokens         PasswordResetToken[]
  verificationTokens          VerificationToken[]
  role                        Role?          @relation(fields: [roleId], references: [id])
  activityLogs                ActivityLog[]
  authLogs                    AuthLog[]

  @@index([email])
  @@index([username])
  @@index([isActive])
  @@index([roleId])
  @@map("users")
}

model UserSession {
  id                    Int      @id @default(autoincrement())
  userId                Int      @map("user_id")
  sessionToken          String   @unique @map("session_token") @db.VarChar(255)
  refreshToken          String?  @unique @map("refresh_token") @db.VarChar(255)
  ipAddress             String?  @map("ip_address")
  userAgent             String?  @map("user_agent")
  expiresAt             DateTime @map("expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  createdAt             DateTime @default(now()) @map("created_at")
  lastAccessed          DateTime @default(now()) @map("last_accessed")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@map("user_sessions")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("password_reset_tokens")
}

model VerificationToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String?   @unique @db.VarChar(255)
  otp       String    @db.VarChar(6)
  purpose   String    @db.VarChar(50)
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([otp])
  @@index([purpose])
  @@map("verification_tokens")
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  description String?   @db.VarChar(255)
  isDefault   Boolean   @default(false) @map("is_default")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  users       User[]
  permissions RolePermission[]

  @@index([name])
  @@map("roles")
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  description String?   @db.VarChar(255)
  category    String    @db.VarChar(50)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  rolePermissions RolePermission[]

  @@index([name])
  @@index([category])
  @@map("permissions")
}

model RolePermission {
  id           Int       @id @default(autoincrement())
  roleId       Int       @map("role_id")
  permissionId Int       @map("permission_id")
  createdAt    DateTime  @default(now()) @map("created_at")

  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model ActivityLog {
  id           Int      @id @default(autoincrement())
  userId       Int?     @map("user_id")
  action       String   @db.VarChar(100)
  description  String?  @db.Text
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent") @db.Text
  status       String   @db.VarChar(50)
  createdAt    DateTime @default(now()) @map("created_at")
  
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([status])
  @@index([createdAt])
  @@map("activity_logs")
}

model AuthLog {
  id           Int      @id @default(autoincrement())
  userId       Int?     @map("user_id")
  eventType    String   @map("event_type") @db.VarChar(50)
  status       String   @db.VarChar(20)
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent") @db.Text
  details      String?  @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([eventType])
  @@index([status])
  @@index([createdAt])
  @@map("auth_logs")
}
